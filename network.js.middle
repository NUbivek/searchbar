                  ) : searchResults ? (
                    <div className="flex flex-col items-center min-h-[400px]">
                      <div className="w-full mb-4 text-center">
                        <h3 className="font-medium text-gray-800">{searchResults.responseText}</h3>
                        <p className="text-sm text-gray-600 mt-1">{searchResults.summary}</p>
                      </div>
                      <div className="flex flex-col items-center justify-center relative min-h-[400px] w-full">
                        {/* Center node - the user */}
                        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10">
                          <div className="w-24 h-24 rounded-full bg-blue-100 border-4 border-blue-500 flex items-center justify-center shadow-lg">
                            <div className="text-center">
                              <div className="font-semibold text-blue-800">{networkData.user.firstName || 'User'}</div>
                              <div className="text-xs text-blue-600 mt-1">You</div>
                            </div>
                          </div>
                        </div>
                        
                        {/* Connection nodes */}
                        {networkData.useAnalyzedConnections && networkData.analyzedConnections 
                          ? networkData.analyzedConnections.slice(0, 8).map((connection, index) => {
                              // Calculate position in a circle around the center
                              const angle = (index * (360 / Math.min(8, networkData.analyzedConnections.length))) * (Math.PI / 180);
                              const radius = 150; // Distance from center
                              const left = `calc(50% + ${Math.cos(angle) * radius}px)`;
                              const top = `calc(50% + ${Math.sin(angle) * radius}px)`;
                              
                              return (
                                <div key={index} 
                                     className="absolute w-16 h-16 rounded-full bg-blue-50 border-2 border-blue-400 flex items-center justify-center transform -translate-x-1/2 -translate-y-1/2 shadow-md"
                                     style={{ left, top }}>
                                  <div className="text-center">
                                    <div className="text-xs font-medium text-blue-800 px-1 truncate">
                                      {connection.firstName || connection.name || `Contact ${index + 1}`}
                                    </div>
                                    {connection.category && (
                                      <div className="text-xxs text-blue-600 px-1 truncate">{connection.category}</div>
                                    )}
                                  </div>
                                </div>
                              );
                            })
                          : networkData.connections && networkData.connections.slice(0, 6).map((connection, index) => {
                              // Calculate position in a circle around the center
                              const angle = (index * (360 / Math.min(6, networkData.connections.length))) * (Math.PI / 180);
                              const radius = 150; // Distance from center
                              const left = `calc(50% + ${Math.cos(angle) * radius}px)`;
                              const top = `calc(50% + ${Math.sin(angle) * radius}px)`;
                              
                              return (
                                <div key={index} 
                                     className="absolute w-16 h-16 rounded-full bg-green-50 border-2 border-green-400 flex items-center justify-center transform -translate-x-1/2 -translate-y-1/2 shadow-md"
                                     style={{ left, top }}>
                                  <div className="text-center">
                                    <div className="text-xs font-medium text-green-800 px-1 truncate">
                                      {connection.firstName || connection.name || `Contact ${index + 1}`}
                                    </div>
                                  </div>
                                </div>
                              );
                            })}
                        
                        {/* Connection lines */}
                        <svg className="absolute inset-0 w-full h-full" style={{ zIndex: 0 }}>
                          {networkData.useAnalyzedConnections && networkData.analyzedConnections 
                            ? networkData.analyzedConnections.slice(0, 8).map((connection, index) => {
                                const angle = (index * (360 / Math.min(8, networkData.analyzedConnections.length))) * (Math.PI / 180);
                                const radius = 150;
                                const x2 = Math.cos(angle) * radius;
                                const y2 = Math.sin(angle) * radius;
                                
                                return (
                                  <line key={index} 
                                        x1="50%" y1="50%" 
                                        x2={`calc(50% + ${x2}px)`} y2={`calc(50% + ${y2}px)`}
                                        stroke="#3B82F6" strokeWidth="2" strokeDasharray="4,4" />
                                );
                              })
                            : networkData.connections && networkData.connections.slice(0, 6).map((connection, index) => {
                                const angle = (index * (360 / Math.min(6, networkData.connections.length))) * (Math.PI / 180);
                                const radius = 150;
                                const x2 = Math.cos(angle) * radius;
                                const y2 = Math.sin(angle) * radius;
                                
                                return (
                                  <line key={index} 
                                        x1="50%" y1="50%" 
                                        x2={`calc(50% + ${x2}px)`} y2={`calc(50% + ${y2}px)`}
                                        stroke="#CBD5E0" strokeWidth="2" strokeDasharray="5,5" />
                                );
                              })}
                        </svg>
                      </div>
                    </div>
