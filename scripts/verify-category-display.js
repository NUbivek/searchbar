/**
 * Category Display Verification Script
 * 
 * This script verifies that categories are correctly being:
 * 1. Generated by the API
 * 2. Processed by CategoryProcessor
 * 3. Limited to max 6 categories with Key Insights prioritized
 * 4. Displayed by ModernCategoryDisplay
 * 
 * Usage: 
 * node scripts/verify-category-display.js [query]
 */

const axios = require('axios');
const chalk = require('chalk');
const readline = require('readline');

// Import necessary components
// Note: In a real environment, these would be imported from your actual codebase
// For this script, we'll mock the behavior
const mockCategoryGenerator = (query, results) => {
  const categories = [
    { id: 'key_insights', name: 'Key Insights', content: results.slice(0, 3), metrics: { overall: 0.95 } },
    { id: 'financial_data', name: 'Financial Data', content: results.slice(0, 2), metrics: { overall: 0.82 } },
    { id: 'market_analysis', name: 'Market Analysis', content: results.slice(1, 3), metrics: { overall: 0.78 } },
    { id: 'industry_trends', name: 'Industry Trends', content: results.slice(2, 4), metrics: { overall: 0.75 } },
    { id: 'company_info', name: 'Company Information', content: results.slice(0, 1), metrics: { overall: 0.73 } },
    { id: 'technical_details', name: 'Technical Details', content: results.slice(3, 5), metrics: { overall: 0.70 } },
    { id: 'news_updates', name: 'News Updates', content: results.slice(2, 5), metrics: { overall: 0.68 } },
    { id: 'research_findings', name: 'Research Findings', content: results.slice(1, 4), metrics: { overall: 0.65 } }
  ];
  return categories;
};

// Mock category limiting function
const limitCategories = (categories, maxCategories = 6) => {
  if (!Array.isArray(categories) || categories.length <= maxCategories) {
    return categories;
  }
  
  console.log(chalk.blue(`Limiting ${categories.length} categories to max ${maxCategories}`));
  
  // First, ensure Key Insights category is included if it exists
  const keyInsightsCategory = categories.find(c => 
    c.id === 'key-insights' || c.id === 'key_insights' || c.name === 'Key Insights'
  );
  
  // Sort the remaining categories by overall score in descending order
  const otherCategories = categories
    .filter(c => c.id !== 'key-insights' && c.id !== 'key_insights' && c.name !== 'Key Insights')
    .sort((a, b) => {
      const aScore = a.metrics?.overall || 0;
      const bScore = b.metrics?.overall || 0;
      return bScore - aScore; // Descending order
    });
  
  // Combine Key Insights with top categories for a total of maxCategories
  let finalCategories = [];
  
  // Add Key Insights first if it exists
  if (keyInsightsCategory) {
    finalCategories.push(keyInsightsCategory);
  }
  
  // Add remaining top categories up to maxCategories total
  const remainingSlots = maxCategories - finalCategories.length;
  finalCategories = [
    ...finalCategories,
    ...otherCategories.slice(0, remainingSlots)
  ];
  
  return finalCategories;
};

// Mock search function
const mockSearch = async (query) => {
  const results = [
    { title: 'Result 1', content: 'Content 1' },
    { title: 'Result 2', content: 'Content 2' },
    { title: 'Result 3', content: 'Content 3' },
    { title: 'Result 4', content: 'Content 4' },
    { title: 'Result 5', content: 'Content 5' }
  ];
  
  // Generate mock categories
  const allCategories = mockCategoryGenerator(query, results);
  
  // Limit categories to 6
  const limitedCategories = limitCategories(allCategories, 6);
  
  return {
    results,
    categories: limitedCategories,
    query
  };
};

// Real search function (uses actual API)
const realSearch = async (query) => {
  try {
    console.log(chalk.blue(`Sending real search request to API with query: "${query}"`));
    
    const response = await axios.post('http://localhost:3003/api/search', {
      query,
      mode: 'verified',
      model: 'mixtral-8x7b'
    });
    
    return response.data;
  } catch (error) {
    console.error(chalk.red('Error calling search API:'), error.message);
    return null;
  }
};

// Test the category flow
const testCategoryFlow = async (query) => {
  // Header 
  console.log(chalk.bgBlue.white('\n Category Display Verification \n'));
  console.log(chalk.cyan(`Testing category flow with query: "${query}"\n`));
  
  // Step 1: Check the mock implementation first
  console.log(chalk.yellow('Step 1: Testing with mock implementation'));
  
  const mockResults = await mockSearch(query);
  
  console.log(`Generated ${mockResults.categories.length} categories:`);
  mockResults.categories.forEach(cat => {
    console.log(chalk.green(`  • ${cat.name} (Score: ${cat.metrics.overall.toFixed(2)}) - ${cat.content.length} items`));
  });
  
  console.log(chalk.green('\n✓ Mock category limiting works correctly'));
  console.log('---------------------------------------------------------------');
  
  // Step 2: Test with real API
  console.log(chalk.yellow('\nStep 2: Testing with real API call'));
  console.log('Calling search API...');
  
  try {
    const apiResults = await realSearch(query);
    
    if (!apiResults) {
      console.log(chalk.red('❌ Failed to get results from API'));
      return;
    }
    
    console.log(chalk.green(`✓ API returned ${apiResults.results.length} results`));
    
    if (!apiResults.categories || apiResults.categories.length === 0) {
      console.log(chalk.red('❌ No categories returned from API'));
    } else {
      console.log(chalk.green(`✓ API returned ${apiResults.categories.length} categories:`));
      
      apiResults.categories.forEach(cat => {
        const score = cat.metrics?.overall?.toFixed(2) || 'N/A';
        const itemCount = Array.isArray(cat.content) ? cat.content.length : 'N/A';
        console.log(chalk.green(`  • ${cat.name} (Score: ${score}) - ${itemCount} items`));
      });
      
      // Step 3: Check if Key Insights is prioritized
      const hasKeyInsights = apiResults.categories.some(c => 
        c.id === 'key-insights' || c.id === 'key_insights' || c.name === 'Key Insights'
      );
      
      if (hasKeyInsights) {
        const firstCategory = apiResults.categories[0];
        const isKeyInsightsFirst = firstCategory.id === 'key-insights' || 
                                   firstCategory.id === 'key_insights' || 
                                   firstCategory.name === 'Key Insights';
        
        if (isKeyInsightsFirst) {
          console.log(chalk.green('✓ Key Insights category is correctly prioritized'));
        } else {
          console.log(chalk.yellow('⚠️ Key Insights category exists but is not first in the list'));
        }
      } else {
        console.log(chalk.yellow('⚠️ No Key Insights category found'));
      }
      
      // Step 4: Check if categories are limited correctly
      if (apiResults.categories.length <= 6) {
        console.log(chalk.green(`✓ Categories are limited to ${apiResults.categories.length} (max 6)`));
      } else {
        console.log(chalk.red(`❌ Too many categories: ${apiResults.categories.length} (should be max 6)`));
      }
    }
  } catch (error) {
    console.error(chalk.red('Error in API test:'), error);
  }
  
  console.log(chalk.bgBlue.white('\n Verification Complete \n'));
};

// Main function
const main = async () => {
  // Get query from command line or use default
  const query = process.argv[2] || 'Apple financial performance last quarter';
  
  await testCategoryFlow(query);
};

// Run the script
main().catch(console.error);
