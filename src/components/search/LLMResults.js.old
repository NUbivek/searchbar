/**
 * LLMResults.js
 * 
 * Component for displaying LLM-generated search results with categorization
 * and metrics. This is the main UI component that uses LLMResultsCore for
 * the processing logic.
 */

import React, { useState, useEffect, useRef } from 'react';
import { createPortal } from 'react-dom';
import { processLLMResults, DEFAULT_CATEGORIES } from './llm/LLMResultsCore';
import { safeStringify } from '../../utils/reactUtils';
import { debug, info, error, warn } from '../../utils/logger';

// Create a log object for consistent logging
const log = { debug, info, error, warn };

/**
 * Component for displaying LLM-generated search results
 * @param {Object} props Component props
 * @param {Array} props.results Array of search results
 * @param {string} props.query Search query
 * @param {boolean} props.showTabs Whether to show category tabs
 * @param {string} props.activeCategory Active category ID (controlled from parent)
 * @param {Function} props.setActiveCategory Function to set active category in parent
 * @param {string} props.sourceType Source type (verified or open)
 * @returns {JSX.Element} Rendered LLM results
 */
const LLMResults = ({ 
  results, 
  query, 
  showTabs = true, 
  activeCategory: externalActiveCategory, 
  setActiveCategory: setExternalActiveCategory,
  sourceType = 'verified',
  tabsOptions = {},
  metricsOptions = {}
}) => {
  const [processedResults, setProcessedResults] = useState([]);
  const [isLLMProcessing, setIsLLMProcessing] = useState(false);
  const [processingError, setProcessingError] = useState(null);
  const [internalActiveCategory, setInternalActiveCategory] = useState('key_insights');
  const containerRef = useRef(null);
  const [resultsPortalTarget, setResultsPortalTarget] = useState(null);
  
  // Track if the component is mounted to prevent setting state after unmount
  const isMountedRef = useRef(true);
  
  useEffect(() => {
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  
  // Use either external or internal active category
  const activeCategory = externalActiveCategory || internalActiveCategory;
  
  // Set active category function
  const setActiveCategory = (categoryId) => {
    if (setExternalActiveCategory) {
      setExternalActiveCategory(categoryId);
    } else {
      setInternalActiveCategory(categoryId);
    }
  };
  
  // Find or create the portal target
  useEffect(() => {
    // Look for an existing results container
    let resultsContainer = document.getElementById('llm-results-container');
    
    if (!resultsContainer) {
      // If it doesn't exist, create it
      resultsContainer = document.createElement('div');
      resultsContainer.id = 'llm-results-container';
      resultsContainer.style.padding = '10px';
      
      // Find the search results container
      const searchResultsContainer = document.querySelector('.overflow-y-auto');
      
      if (searchResultsContainer) {
        // Insert at the beginning
        searchResultsContainer.insertBefore(resultsContainer, searchResultsContainer.firstChild);
      }
    }
    
    setResultsPortalTarget(resultsContainer);
    
    // Cleanup
    return () => {
      if (resultsContainer && resultsContainer.parentNode) {
        resultsContainer.parentNode.removeChild(resultsContainer);
      }
    };
  }, []);
  
  // Process results when they change
  useEffect(() => {
    if (!results || !query) {
      setProcessedResults([]);
      return;
    }
    
    const handleResultsProcessing = async () => {
      setIsLLMProcessing(true);
      setProcessingError(null);
      
      try {
        // Log incoming results for debugging
        console.log('DEBUG: Processing LLM results:', {
          resultsType: typeof results,
          isNull: results === null,
          isUndefined: results === undefined,
          hasCategories: results?.categories ? true : false,
          hasContent: results?.content ? true : false
        });
        
        // Normalize and process results
        const normalizedResults = results && typeof results === 'object' ? results : {
          content: typeof results === 'string' ? results : JSON.stringify(results),
          categories: {},
          sources: []
        };
        
        // Process results and calculate metrics
        const processedData = await processLLMResults(normalizedResults, query);
        
        // Filter categories that meet minimum thresholds
        const filteredCategories = processedData.categories
          .filter(category => {
            const metrics = category.metrics || {};
            return (
              metrics.relevance >= 70 &&
              metrics.credibility >= 70 &&
              metrics.accuracy >= 70
            );
          })
          .sort((a, b) => {
            // Sort by weighted relevance (2x) + credibility + accuracy
            const scoreA = (a.metrics.relevance * 2) + a.metrics.credibility + a.metrics.accuracy;
            const scoreB = (b.metrics.relevance * 2) + b.metrics.credibility + b.metrics.accuracy;
            return scoreB - scoreA;
          })
          .slice(0, 6); // Limit to top 6 categories
        
        // Always include Key Insights if it meets thresholds
        const keyInsights = processedData.categories.find(c => c.id === 'key_insights');
        if (keyInsights && !filteredCategories.find(c => c.id === 'key_insights')) {
          const metrics = keyInsights.metrics || {};
          if (metrics.relevance >= 70 && metrics.credibility >= 70 && metrics.accuracy >= 70) {
            filteredCategories.unshift(keyInsights);
            if (filteredCategories.length > 6) {
              filteredCategories.pop();
            }
          }
        }
        
        // Update state if component is still mounted
        if (isMountedRef.current) {
          if (filteredCategories.length > 0) {
            setProcessedResults(filteredCategories);
            if (!activeCategory) {
              setActiveCategory(filteredCategories[0].id);
            }
          } else {
            setProcessedResults([]);
          }
          
          // Dispatch results processed event
          window.dispatchEvent(new CustomEvent('llmResultsProcessed', {
            detail: {
              processedResults: filteredCategories,
              activeCategory: filteredCategories.length > 0 ? 
                (activeCategory || filteredCategories[0].id) : null
            }
          }));
        }
      } catch (error) {
        log.error('Error processing LLM results:', error);
        
        if (isMountedRef.current) {
          setProcessingError(error.message || 'Error processing results');
          setProcessedResults([]);
          setActiveCategory(null);
          
          window.dispatchEvent(new CustomEvent('llmResultsError', {
            detail: { error: error.message || 'Unknown error' }
          }));
        }
      } finally {
        if (isMountedRef.current) {
          setIsLLMProcessing(false);
        }
      }
    };
    
    handleResultsProcessing();
    
    // Dependency array contains only what we need
  }, [results, query, activeCategory]);
  
  // Update external active category when internal one changes
  useEffect(() => {
    if (setExternalActiveCategory && activeCategory && activeCategory !== externalActiveCategory) {
      setExternalActiveCategory(activeCategory);
    }
  }, [activeCategory, setExternalActiveCategory, externalActiveCategory]);
  
  // Handle category change
  const handleCategoryChange = (categoryId) => {
    setActiveCategory(categoryId);
  };
  
  // Render the complete results (categories + content)
  const renderCompleteResults = () => {
    if (isLLMProcessing) {
      return (
        <div className="loading-container" style={{ textAlign: 'center', padding: '40px' }}>
          <div className="loading-spinner" style={{ 
            width: '40px', 
            height: '40px',
            border: '4px solid #f3f3f3',
            borderTop: '4px solid #3498db',
            borderRadius: '50%',
            margin: '0 auto 20px',
            animation: 'spin 1s linear infinite'
          }}></div>
          <p>Processing search results...</p>
        </div>
      );
    }
    
    if (processingError) {
      return (
        <div className="error-container" style={{ padding: '20px', color: '#D32F2F' }}>
          <h3>Error Processing Results</h3>
          <p>{processingError}</p>
        </div>
      );
    }
    
    if (!processedResults || processedResults.length === 0) {
      return (
        <div className="no-results-container" style={{ padding: '20px' }}>
          <p>No results could be processed. Try refining your search query.</p>
        </div>
      );
    }
    
    // Determine the active category content
    const activeCategoryObj = processedResults.find(cat => cat.id === activeCategory) || processedResults[0];
    
    return (
      <div className="llm-results-container">
        {showTabs && (
          <div className="category-tabs" style={{ 
            marginBottom: '15px',
            display: 'flex',
            flexWrap: 'wrap',
            gap: '10px'
          }}>
            {processedResults.map(category => (
              <button
                key={category.id}
                className={`category-tab ${activeCategory === category.id ? 'active' : ''}`}
                style={{
                  padding: '8px 15px',
                  borderRadius: '20px',
                  border: 'none',
                  background: activeCategory === category.id ? category.color : '#f0f0f0',
                  color: activeCategory === category.id ? 'white' : '#333',
                  cursor: 'pointer',
                  fontWeight: activeCategory === category.id ? 'bold' : 'normal',
                  transition: 'all 0.2s ease'
                }}
                onClick={() => handleCategoryChange(category.id)}
              >
                {category.title}
              </button>
            ))}
          </div>
        )}
        
        <div className="category-content" style={{
          backgroundColor: 'white',
          padding: '15px',
          borderRadius: '8px',
          boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
          maxHeight: '500px',
          overflowY: 'auto'
        }}>
          {activeCategoryObj && (
            <>
              <h3 className="category-title" style={{
                margin: '0 0 15px 0',
                color: activeCategoryObj.color,
                borderBottom: `2px solid ${activeCategoryObj.color}`,
                paddingBottom: '8px'
              }}>
                {activeCategoryObj.title}
              </h3>
              <div 
                className="category-content-text"
                style={{ lineHeight: '1.6' }}
                dangerouslySetInnerHTML={{ __html: activeCategoryObj.content }}
              />
            </>
          )}
        </div>
      </div>
    );
  };
  
  return (
    <>
      {/* Render in regular container */}
      <div ref={containerRef} className="llm-results">
        {renderCompleteResults()}
      </div>
      
      {/* Render in portal for fixed positioning */}
      {resultsPortalTarget && createPortal(
        <style>{`
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        `}</style>,
        document.head
      )}
    </>
  );
};

export default LLMResults;
