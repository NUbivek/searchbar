/**
 * SimpleLLMResults.js
 * A clean, minimalist approach to displaying LLM search results with tabs
 */

import React, { useState, useEffect } from 'react';
import TabNavigation from './TabNavigation';
import styles from './SimpleLLMResults.module.css';

/**
 * ExpandableContent Component
 * Handles expandable content with show more/less functionality
 * Now with support for different content types
 */
const ExpandableContent = ({ content }) => {
  const [expanded, setExpanded] = useState(false);
  const initialDisplayLength = 1000; // Characters to display initially
  
  // Handle different content types
  const processContent = () => {
    // If content is null or undefined, return empty string
    if (content === null || content === undefined) {
      console.log('ExpandableContent: content is null or undefined');
      return '';
    }
    
    // If content is already a string, use it directly
    if (typeof content === 'string') {
      return content;
    }
    
    // If content is an object with text or html property, use that
    if (typeof content === 'object') {
      if (content.text) return content.text;
      if (content.html) return content.html;
      if (content.content) return content.content;
      
      // Try to stringify the object
      try {
        return JSON.stringify(content, null, 2);
      } catch (e) {
        console.error('Failed to stringify content:', e);
        return 'Unable to display content';
      }
    }
    
    // For any other type, convert to string
    return String(content);
  };
  
  const processedContent = processContent();
  const contentLength = processedContent.length;
  
  // Should we show the expand button?
  const shouldShowExpandButton = contentLength > initialDisplayLength;
  
  // The actual content to display
  const displayContent = expanded ? processedContent : processedContent.substring(0, initialDisplayLength);
  
  return (
    <div className={styles.expandableContent}>
      <div 
        className={styles.fullContent}
        dangerouslySetInnerHTML={{ 
          __html: displayContent + (shouldShowExpandButton && !expanded ? '...' : '') 
        }} 
      />
      
      {shouldShowExpandButton && (
        <button 
          className={styles.expandButton}
          onClick={() => setExpanded(!expanded)}
        >
          {expanded ? 'Show Less' : 'Show More'}
        </button>
      )}
    </div>
  );
};

/**
 * SimpleLLMResults Component
 * Displays LLM search results with a clean tab interface
 * 
 * @param {Object} props Component props
 * @param {Array} props.categories - Array of category objects
 * @param {Array} props.results - Array of search result items
 * @param {string} props.query - The search query
 * @param {boolean} props.showTabs - Whether to show tabs or not
 * @param {boolean} props.forceShowTabs - Override to force showing tabs even if only one tab exists
 * @param {string} props.defaultTab - Name of the default tab to show
 * @param {Function} props.onFollowUpSearch - Callback for handling follow-up searches
 */
const SimpleLLMResults = ({ 
  categories = [], 
  results = [],
  query = '',
  showTabs = true, // Add a new prop to control whether tabs should be shown
  forceShowTabs = false, // Add a new prop to force showing tabs even if only one tab exists
  defaultTab = 'Results', // Default tab name
  onFollowUpSearch = null // Add onFollowUpSearch prop with default null
}) => {
  // Custom debug flag to force tab display - controlled via props
  const FORCE_TAB_DISPLAY = forceShowTabs === true;
  // Format categories for display
  const [formattedCategories, setFormattedCategories] = useState([]);
  const [allResultsTab, setAllResultsTab] = useState(null);
  
  // Log when forceShowTabs changes to aid debugging
  useEffect(() => {
    console.log(`ForceShowTabs prop is ${forceShowTabs ? 'ENABLED' : 'disabled'} with defaultTab="${defaultTab}"`);
  }, [forceShowTabs, defaultTab]);
  
  // SUPER-ENHANCED data validation with comprehensive LLM result detection
  const validResults = React.useMemo(() => {
    // Critical detailed logging for debugging
    console.log('Validating results in SimpleLLMResults:', {
      resultsType: typeof results,
      isArray: Array.isArray(results),
      length: Array.isArray(results) ? results.length : 0,
      firstItem: Array.isArray(results) && results.length > 0 ? typeof results[0] : 'N/A',
      hasDirectLLMFlags: !!(results && (
        results.__isImmutableLLMResult === true ||
        results.isLLMResults === true ||
        results.llmProcessed === true ||
        results.__isLLMObject === true
      )),
      hasMetadataFlags: !!(results && results.metadata && (
        results.metadata.processed === true ||
        results.metadata.llmProcessed === true
      )),
      hasContent: results?.content ? true : false,
      contentType: results?.content ? typeof results.content : 'none',
      hasLLMFields: !!(results && (results.text || results.llmResponse)),
      hasCategories: results?.categories ? Object.keys(results?.categories || {}).length : 0
    });
    
    // SUPER-COMPREHENSIVE LLM detection function
    const isLLMResult = (item) => {
      if (!item) return false;
      
      // Check ALL possible flags that could indicate this is an LLM result
      const hasDirectFlags = (
        item.__isImmutableLLMResult === true ||
        item.isLLMResults === true ||
        item.llmProcessed === true ||
        item.__isLLMObject === true ||
        item.__isPreservedLLMResult === true ||
        item.__isPreservedFullLLMResult === true ||
        item.permanentIsLLMResults === true
      );
      
      // Check metadata flags
      const hasMetadataFlags = (
        item.metadata && (
          item.metadata.processed === true ||
          item.metadata.llmProcessed === true
        )
      );
      
      // Check structural indicators
      const hasStructuralIndicators = (
        // Having these properties is a strong indicator of LLM results
        item.llmResponse !== undefined ||
        item.categories !== undefined ||
        (typeof item.content === 'object' &&
         item.content &&
         item.content.categories) ||
        // Assistant type with specific content structure
        (item.type === 'assistant' && item.resultId)
      );
      
      return hasDirectFlags || hasMetadataFlags || hasStructuralIndicators;
    };
    
    // CRITICAL: LLM Response Object Detection
    // This handles direct LLM response objects that contain text/content and categories
    if (results && typeof results === 'object' && !Array.isArray(results)) {
      // First, check if this is definitely an LLM result using our comprehensive detection
      if (isLLMResult(results)) {
        console.log('DETECTED LLM RESULT WITH COMPREHENSIVE CHECKS:', {
          resultId: results.resultId || 'unknown',
          hasCategories: !!results.categories,
          categoryCount: results.categories ? Object.keys(results.categories).length : 0
        });
        
        // Case 1: Direct LLM response with text/content and categories
        if ((results.text || results.content || results.llmResponse) && results.categories) {
          console.log('Processing LLM result with text/content AND categories');
          
          // Create an enhanced LLM result object with all necessary flags
          return {
            ...results,
            isLLMResults: true,
            __isImmutableLLMResult: true,
            __isPreservedFullLLMResult: true,
            llmProcessed: true,
            __timestamp: Date.now(),
            // Ensure categories are accessible at the top level
            categories: results.categories || (results.content && results.content.categories) || {}
          };
        }
        
        // Case 2: Immutable LLM result with content property
        if (typeof results.content === 'object' && 
            !Array.isArray(results.content) && 
            (results.content.text || results.content.content || results.content.categories)) {
          console.log('Processing LLM result with structured content object');
          
          // Create a hybrid object that preserves both the content structure and top-level properties
          const enhancedResult = {
            ...results.content,
            // Preserve the original flags
            isLLMResults: true,
            __isImmutableLLMResult: true,
            llmProcessed: true,
            // Add tracking
            __isPreservedLLMResult: true,
            originalResultId: results.resultId,
            __timestamp: Date.now(),
            // Ensure categories are accessible
            categories: results.content.categories || results.categories || {}
          };
          
          console.log('Created enhanced hybrid LLM result preserving both content and flags');
          return enhancedResult;
        }
        
        // Case 3: If the LLM result has an array of content items
        if (Array.isArray(results.content) && results.content.length > 0) {
          console.log('Processing LLM result with content array:', results.content.length, 'items');
          
          // Enhance the array items with LLM flags
          const enhancedArray = results.content.map(item => ({
            ...item,
            isLLMResults: true,
            __isFromImmutableLLM: true,
            llmProcessed: true,
            originalResultId: results.resultId,
            __timestamp: Date.now()
          }));
          
          // Return the enhanced array with categories if available
          if (results.categories && Object.keys(results.categories).length > 0) {
            console.log('Adding categories to array result');
            // Add the categories as a special first item
            return [
              {
                title: 'LLM Summary',
                content: results.text || results.llmResponse?.content || 'LLM processed results',
                categories: results.categories,
                isLLMResults: true,
                __isCategorySummary: true,
                __timestamp: Date.now()
              },
              ...enhancedArray
            ];
          }
          
          return enhancedArray;
        }
        
        // Case 4: For any other LLM result format, preserve the entire structure
        console.log('Preserving non-standard LLM result format');
        return {
          ...results,
          isLLMResults: true,
          __isImmutableLLMResult: true,
          llmProcessed: true,
          __isPreservedFullLLMResult: true,
          __timestamp: Date.now()
        };
      }
    }
    
    // SUPER-ENHANCED: Comprehensive fallback handling for non-standard result formats
    if (!results) {
      console.warn('No results provided to SimpleLLMResults');
      return {
        __isEmpty: true,
        __isLLMPlaceholder: true,
        isLLMResults: true,
        content: 'No results were provided to process',
        categories: {}
      };
    }
    
    if (!Array.isArray(results)) {
      console.log('Results is not an array, intelligent format detection activated');
      
      // CASE 1: Check if this is a direct LLM response by checking for LLM flags
      if (isLLMResult(results)) {
        console.log('Detected non-array LLM result with flags, preserving as-is with enhanced flags');
        return {
          ...results,
          __isNonArrayLLMResult: true,
          isLLMResults: true,
          llmProcessed: true,
          __isImmutableLLMResult: true
        };
      }
      
      // CASE 2: Object with results array property
      if (results.results && Array.isArray(results.results)) {
        console.log('Found results array property with', results.results.length, 'items');
        
        // Check if results has LLM metadata to preserve
        if (results.metadata && (results.metadata.processed || results.metadata.llmProcessed)) {
          console.log('Results object has LLM metadata, preserving while extracting results array');
          // Map each result to include the parent's LLM metadata
          return results.results.map(item => ({
            ...item,
            __extractedFromLLMParent: true,
            isLLMResults: true,
            llmProcessed: true,
            parentMetadata: results.metadata
          }));
        }
        
        return results.results;
      }
      
      // CASE 3: Object with content array property
      if (results.content && Array.isArray(results.content)) {
        console.log('Found content array property with', results.content.length, 'items');
        
        // Check if we should preserve categories from the parent
        if (results.categories && Object.keys(results.categories).length > 0) {
          console.log('Preserving categories from parent object');
          // Create a special first item with the categories
          return [
            {
              title: 'LLM Summary',
              content: results.text || results.summary || 'LLM Results',
              categories: results.categories,
              isLLMResults: true,
              __isCategorySummary: true
            },
            ...results.content
          ];
        }
        
        return results.content;
      }
      
      // CASE 4: Direct LLM response object (check specific structure)
      if (typeof results === 'object' && 
          (results.text || results.content || results.llmResponse || results.categories)) {
        console.log('Found potential direct LLM response object with specific properties');
        return {
          ...results,
          __isDetectedLLMResponse: true,
          isLLMResults: true,
          __isImmutableLLMResult: true,
          llmProcessed: true
        };
      }
      
      // CASE 5: String content that might be JSON
      if (typeof results === 'string') {
        try {
          const parsed = JSON.parse(results);
          console.log('Successfully parsed string as JSON');
          
          if (Array.isArray(parsed)) {
            console.log('Parsed string into array with', parsed.length, 'items');
            return parsed.map(item => ({
              ...item,
              __parsedFromString: true
            }));
          }
          
          if (parsed.results && Array.isArray(parsed.results)) {
            console.log('Parsed string into object with results array');
            return parsed.results.map(item => ({
              ...item,
              __parsedFromString: true,
              __fromResultsProperty: true
            }));
          }
          
          if (isLLMResult(parsed)) {
            console.log('Parsed string is an LLM result');
            return {
              ...parsed,
              __parsedFromString: true,
              isLLMResults: true,
              __isImmutableLLMResult: true,
              llmProcessed: true
            };
          }
          
          // Generic object from JSON string
          return {
            title: 'JSON Result',
            content: JSON.stringify(parsed, null, 2),
            __parsedFromString: true,
            isLLMResults: true
          };
        } catch (e) {
          console.warn('Failed to parse results string as JSON:', e.message);
          
          // Plain text, create a single formatted result
          return {
            title: 'Text Result',
            content: results,
            __isTextContent: true,
            source: 'Search API',
            isLLMResults: true // Mark as LLM to preserve formatting
          };
        }
      }
      
      // CASE 6: Last resort - unknown object, create formatted result
      console.log('Unknown object format, creating formatted result');
      return {
        title: 'Formatted Result',
        content: typeof results === 'object' ? JSON.stringify(results, null, 2) : String(results),
        source: 'Search API',
        __isUnknownFormat: true,
        isLLMResults: true, // Mark as LLM to preserve formatting
        categories: {}
      };
    }
    
    return results;
  }, [results]);

  // Create a default "Results" tab that will always be present
  const [resultsTab, setResultsTab] = useState(null);
  
  // DEBUG FLAGS
  const FORCE_TAB_DISPLAY = true; // Force tabs to display for debugging

  useEffect(() => {
    console.log('SimpleLLMResults useEffect running with', 
      Array.isArray(validResults) ? validResults.length : 'non-array', 'valid results');
    
    // Additional logging to help debug LLM result rendering issues
    console.log('SimpleLLMResults props state:', {
      resultsLength: Array.isArray(results) ? results.length : 'not array',
      categoriesLength: Array.isArray(categories) ? categories.length : 'not array',
      query: query || 'none',
      showTabs: showTabs,
      hasImmutableFlag: results && results.__isImmutableLLMResult === true
    });
    
    // Create a default "Results" tab that will always be present
    setResultsTab({
      id: 'results-tab',
      label: 'Results',
      content: (
        <div className={styles.resultsContainer}>
          {/* Display raw results in a clean format */}
          {Array.isArray(validResults) && validResults.length > 0 ? (
            validResults.map((result, index) => (
              <div key={`result-${index}`} className={result.isCompactResult ? styles.compactResultItem : styles.resultItem}>
                {/* Check if this is an error result first */}
                {result.isError || result.type === "error" ? (
                  /* Error display with special styling */
                  <div className={styles.errorBlock}>
                    <div dangerouslySetInnerHTML={{ __html: result.text }} />
                    <div style={{ marginTop: '15px', fontSize: '0.9rem' }}>
                      <p style={{ fontWeight: 'bold', marginBottom: '8px' }}>To resolve this issue:</p>
                      <ul style={{ paddingLeft: '20px', lineHeight: '1.5' }}>
                        <li>Check your API key in the <code>.env.local</code> file</li>
                        <li>Verify your API subscription is active</li>
                        <li>Try a different LLM model from the dropdown</li>
                        <li>Try again in a few minutes</li>
                      </ul>
                    </div>
                  </div>
                ) : (
                  /* Standard display with all metadata */
                  <>
                    {/* More prominent title with better fallback */}
                    {result.title && (
                      <h3 className={styles.resultTitle}>
                        {result.title || result.name || 'Search Result'}
                      </h3>
                    )}
                    
                    <div className={styles.resultContent}>
                      {typeof result.content === 'string' ? (
                        <ExpandableContent content={result.content} />
                      ) : typeof result.content === 'object' && result.content !== null ? (
                        <div className={styles.objectContent}>
                          <pre>{JSON.stringify(result.content, null, 2)}</pre>
                        </div>
                      ) : (
                        <div className={styles.fullContent}>
                          {String(result.content || 'No content available')}
                        </div>
                      )}
                    </div>
                    
                    {/* Enhanced metadata display */}
                    {(result.source || result.date || result.url) && (
                      <div className={styles.resultMeta || 'resultMeta'}>
                        {result.source && <span className={styles.source || 'source'}><b>Source:</b> {result.source}</span>}
                        {result.date && <span className={styles.date || 'date'}><b>Date:</b> {new Date(result.date).toLocaleString()}</span>}
                        {result.url && (
                          <div className={styles.url || 'url'}>
                            <b>URL:</b> <a href={result.url} target="_blank" rel="noopener noreferrer">
                              {result.url.length > 40 ? result.url.substring(0, 40) + '...' : result.url}
                            </a>
                          </div>
                        )}
                      </div>
                    )}
                  </>
                )}
              </div>
            ))
          ) : !Array.isArray(validResults) && typeof validResults === 'object' ? (
            <div className={styles.llmSummary}>
              <h3 className={styles.summaryTitle}>LLM Summary</h3>
              <div className={styles.summaryContent}>
                {/* Handle various LLM response formats */}
                {validResults.text ? (
                  <ExpandableContent content={validResults.text} />
                ) : validResults.content && typeof validResults.content === 'string' ? (
                  <ExpandableContent content={validResults.content} />
                ) : validResults.content && typeof validResults.content === 'object' && validResults.content.text ? (
                  <ExpandableContent content={validResults.content.text} />
                ) : (
                  <ExpandableContent content={JSON.stringify(validResults, null, 2)} />
                )}
              </div>
            </div>
          ) : (
            <div className={styles.noResultsMessage}>
              No results available for this search. Try a different search term.
            </div>
          )}
        </div>
      )
    });
  }, [validResults]);
    
    // Enhanced detection of immutable LLM results
    if (results && (results.__isImmutableLLMResult === true || results.isLLMResults === true)) {
      console.log('DETECTED IMMUTABLE LLM RESULTS DURING RENDER CYCLE', {
        resultId: results.resultId || 'unknown',
        contentType: typeof results.content,
        hasCategories: !!(results.categories || (results.content && results.content.categories))
      });
      
      // Force setting the LLM flags to ensure consistent rendering
      if (!results.__isImmutableLLMResult) results.__isImmutableLLMResult = true;
      if (!results.isLLMResults) results.isLLMResults = true;
      if (!results.llmProcessed) results.llmProcessed = true;
    }
    
    // Build tabs data
    const createTabs = () => {
      // Always include an "All Results" tab
      const allResults = {
        id: 'all-results',
        label: 'All Results',
        content: (
          <div className={styles.resultsContainer}>
            {/* REMOVED QUERY DISPLAY FROM ALL RESULTS TAB */}
            {console.log('SimpleLLMResults rendering with', 
              Array.isArray(validResults) ? validResults.length : 'non-array', 
              'valid results of type', typeof validResults)}
            
            {/* ENHANCED: Improved handling of LLM response formats */}
            {!Array.isArray(validResults) && typeof validResults === 'object' ? (
              <div className={styles.llmSummary}>
                <h3 className={styles.summaryTitle}>LLM Summary</h3>
                <div className={styles.summaryContent}>
                  {/* Handle various LLM response formats */}
                  {validResults.text ? (
                    <ExpandableContent content={validResults.text} />
                  ) : validResults.content && typeof validResults.content === 'string' ? (
                    <ExpandableContent content={validResults.content} />
                  ) : validResults.content && typeof validResults.content === 'object' && validResults.content.text ? (
                    <ExpandableContent content={validResults.content.text} />
                  ) : (
                    <ExpandableContent content={JSON.stringify(validResults, null, 2)} />
                  )}
                </div>
              </div>
            ) : null}

            {/* Handle both array results and object with content property */}
            {Array.isArray(validResults) && validResults.length > 0 ? (
              validResults.map((result, index) => (
                <div key={`result-${index}`} className={styles.resultItem}>
                  <h3 className={styles.resultTitle}>{result.title || 'Result'}</h3>
                  
                  {/* Display expandable content in the Results tab */}
                  <div className={styles.resultContent}>
                    {typeof result.content === 'string' ? (
                      <ExpandableContent content={result.content} />
                    ) : (
                      <div className={styles.fullContent}>
                        {JSON.stringify(result.content, null, 2)}
                      </div>
                    )}
                  </div>
                  
                  {/* Display additional metadata */}
                  <div className={styles.resultMetadata}>
                    {result.source && (
                      <div className={styles.resultSource}>
                        <span className={styles.metadataLabel}>Source:</span> {result.source}
                      </div>
                    )}
                    {result.url && (
                      <div className={styles.resultUrl}>
                        <span className={styles.metadataLabel}>URL:</span> 
                        <a href={result.url} target="_blank" rel="noopener noreferrer">
                          {result.url.length > 50 ? result.url.substring(0, 50) + '...' : result.url}
                        </a>
                      </div>
                    )}
                    {result.date && (
                      <div className={styles.resultDate}>
                        <span className={styles.metadataLabel}>Date:</span> {result.date}
                      </div>
                    )}
                    {(result.relevance || result.relevance === 0) && (
                      <div className={styles.resultRelevance}>
                        <span className={styles.metadataLabel}>Relevance:</span> {result.relevance}%
                      </div>
                    )}
                  </div>
                </div>
              ))
            ) : (
              <div className={styles.noResultsMessage}>
                {!results ? 
                  'No results data available. This may be due to an error in processing.' : 
                  'No results available for this search. Try a different search term.'}
  
              </div>
            )}
          </div>
        )
      };
      
      setAllResultsTab(allResults);
      
      // Create tabs from categories
      if (Array.isArray(categories) && categories.length > 0) {
        const categoryTabs = categories.map((category) => {
          // Ensure category has necessary properties
          const id = category.id || `category-${Math.random().toString(36).substr(2, 9)}`;
          const label = category.name || category.title || 'Category';
          
          return {
            id,
            label,
            content: (
              <div className={styles.categoryContent}>
                <h3 className={styles.categoryTitle}>{label}</h3>
                {category.content ? (
                  typeof category.content === 'string' ? (
                    <div dangerouslySetInnerHTML={{ __html: category.content }} />
                  ) : Array.isArray(category.content) ? (
                    <div className={styles.categoryItems}>
                      {category.content.map((item, i) => (
                        <div key={`item-${i}`} className={styles.categoryItem}>
                          {typeof item === 'string' ? (
                            <div dangerouslySetInnerHTML={{ __html: item }} />
                          ) : (
                            <div>{JSON.stringify(item)}</div>
                          )}
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div>{JSON.stringify(category.content)}</div>
                  )
                ) : (
                  <div className={styles.noContentMessage}>
                    No content available for this category.
                  </div>
                )}
              </div>
            )
          };
        });
        
        setFormattedCategories(categoryTabs);
      } else {
        setFormattedCategories([]);
      }
    };
    
    createTabs();
  }, [categories, results]);
  
  // Combine all tabs for the navigation component
  const allTabs = React.useMemo(() => {
    // Always start with the resultsTab if it exists
    const tabs = [];
    
    // Add the Results tab first if it exists
    if (resultsTab) {
      console.log('🔍 Adding main results tab:', resultsTab.id, resultsTab.label);
      tabs.push(resultsTab);
    }
    
    // Add allResultsTab if it exists and is different from resultsTab
    if (allResultsTab && allResultsTab.id !== 'results-tab') {
      console.log('🔍 Adding all results tab:', allResultsTab.id, allResultsTab.label);
      tabs.push(allResultsTab);
    }
    
    // Add category tabs
    if (formattedCategories && formattedCategories.length > 0) {
      console.log(`🔍 Adding ${formattedCategories.length} category tabs`);
      tabs.push(...formattedCategories);
    }
    
    // CRITICAL FIX: If we still have no tabs, create a default one
    // This covers both the case of empty tabs and the case when forceShowTabs is true
    if ((tabs.length === 0 && Array.isArray(validResults) && validResults.length > 0) || forceShowTabs) {
      // If we're forcing tabs and already have some, don't add another one
      if (!(forceShowTabs && tabs.length > 0)) {
        console.log('⚠️ Adding default tab - empty tabs or forceShowTabs is true');
        tabs.push({
          id: 'default-results-tab',
          label: defaultTab,
          content: (
          <div className={styles.resultsContainer}>
            {validResults.map((result, index) => (
              <div key={`emergency-result-${index}`} className={styles.resultItem}>
                <div className={styles.resultContent}>
                  {typeof result === 'string' ? result : 
                   typeof result.content === 'string' ? result.content :
                   JSON.stringify(result)}
                </div>
              </div>
            ))}
          </div>
        )
      });
    }
    
    return tabs;
  }, [resultsTab, allResultsTab, formattedCategories, validResults]);

  console.log('🔄 Rendering SimpleLLMResults with', allTabs?.length || 0, 'tabs and', results?.length || 0, 'results');
  
  // Critical debugging to help identify rendering issues
  useEffect(() => {
    console.log('SimpleLLMResults FINAL RENDER with props:', {
      showTabs,
      forceShowTabs,
      defaultTab,
      resultsCount: Array.isArray(results) ? results.length : 'not array',
      hasQuery: !!query,
      hasFollowUp: !!onFollowUpSearch,
      allTabsCount: allTabs?.length || 0,
      formattedCategoriesCount: formattedCategories?.length || 0
    });
  }, [showTabs, forceShowTabs, defaultTab, results, query, onFollowUpSearch, allTabs, formattedCategories]);

  // Create a raw text query display outside any containers
  const renderRawQuery = () => {
    if (!query) return null;
    return (
      <div style={{
        fontSize: '14px',
        fontFamily: 'monospace',
        width: '100%',
        padding: '5px 0',
        margin: '0',
        borderTop: 'none',
        borderBottom: 'none',
        background: 'transparent',
        boxShadow: 'none',
        outline: 'none'
      }}>
        {query}
      </div>
    );
  };
  
  return (
    <>
      {/* Raw query completely separate from LLM results */}
      {renderRawQuery()}

      <div className={styles.container} data-testid="simple-llm-results">
      
      {/* DEBUG info to show whether tabs should be displayed */}
      <div style={{ background: '#f8f9fa', padding: '5px', fontSize: '11px', color: '#666', display: 'none' }}>
        Debug: showTabs={String(showTabs)}, allTabs length={allTabs?.length || 0}, FORCE_TAB_DISPLAY={String(FORCE_TAB_DISPLAY)}
      </div>
      
      {/* Show tabs if we have any and showTabs is true (or forceShowTabs is on) */}
      {(showTabs || forceShowTabs) ? (
        /* Always show tabs if forceShowTabs is true, otherwise only if we have tabs */
        (forceShowTabs || (allTabs && allTabs.length > 0)) ? (
          <div style={{ border: '1px solid #e2e8f0', borderRadius: '8px', margin: '10px 0' }}>
            <TabNavigation 
              tabs={allTabs.length > 0 ? allTabs : [{
                id: 'forced-default-tab',
                label: defaultTab,
                content: (
                  <div className={styles.resultsContainer}>
                    {validResults && validResults.length > 0 ? (
                      validResults.map((result, index) => (
                        <div key={`tab-${index}`} className={styles.resultItem}>
                          <div className={styles.resultContent}>
                            {typeof result === 'string' ? result : 
                             typeof result.content === 'string' ? result.content :
                             JSON.stringify(result)}
                          </div>
                        </div>
                      ))
                    ) : (
                      <div className={styles.noContentMessage}>
                        No results available for the {defaultTab} tab.
                      </div>
                    )}
                  </div>
                )
              }]} 
              defaultTabId={resultsTab?.id || allResultsTab?.id || (formattedCategories && formattedCategories.length > 0 ? formattedCategories[0].id : 'forced-default-tab')}
              onTabChange={(tabId) => console.log('Tab changed to:', tabId)}
            />
          </div>
        ) : (
          <div className={styles.noResultsMessage || 'noResultsMessage'} style={{ padding: '20px', textAlign: 'center', color: '#666' }}>
            <h3 style={{ color: '#e53e3e', marginBottom: '10px' }}>API Authentication Error</h3>
            <p>No LLM results available due to an API authentication issue.</p>
            <div style={{ fontSize: '0.9rem', marginTop: '15px', textAlign: 'left', background: '#f8f9fa', padding: '15px', borderRadius: '6px' }}>
              <p style={{ fontWeight: 'bold', marginBottom: '8px' }}>To resolve this issue:</p>
              <ul style={{ paddingLeft: '20px', lineHeight: '1.5' }}>
                <li>Check your API key in the <code>.env.local</code> file</li>
                <li>Ensure Together API keys start with <code>tok-</code></li>
                <li>Verify your API subscription is active</li>
                <li>Try a different LLM model from the dropdown</li>
                <li>Try again in a few minutes</li>
              </ul>
            </div>
          </div>
        )
      ) : (
        // When not showing tabs, just display the results directly - this is the case for nested usage
        <div className={styles.resultsContainer}>
          {/* Add some debugging info */}
          <div style={{ display: 'none' }}>
            <p>Debug: Direct results display mode (showTabs={showTabs.toString()})</p>
            <p>Results count: {validResults?.length || 0}</p>
          </div>
          
          {validResults.length > 0 ? (
            validResults.map((result, index) => (
              <div key={`result-${index}`} className={result.isCompactResult ? styles.compactResultItem : styles.resultItem}>
                {/* Check if this is an error result first */}
                {result.isError || result.type === "error" ? (
                  /* Error display with special styling */
                  <div className={styles.errorBlock}>
                    <div dangerouslySetInnerHTML={{ __html: result.text }} />
                    <div style={{ marginTop: '15px', fontSize: '0.9rem' }}>
                      <p style={{ fontWeight: 'bold', marginBottom: '8px' }}>To resolve this issue:</p>
                      <ul style={{ paddingLeft: '20px', lineHeight: '1.5' }}>
                        <li>Check your API key in the <code>.env.local</code> file</li>
                        <li>Verify your API subscription is active</li>
                        <li>Try a different LLM model from the dropdown</li>
                        <li>Try again in a few minutes</li>
                      </ul>
                    </div>
                  </div>
                ) : result.isCompactResult ? (
                  /* Compact display - normal text with regular styling */
                  <div className={styles.compactContent || 'compactContent'} style={{ marginBottom: '10px' }}>
                    <span style={{ color: '#333', fontSize: '0.95rem' }}>{result.content}</span>
                  </div>
                ) : (
                  /* Standard display with all metadata */
                  <>
                    {/* More prominent title with better fallback */}
                    {result.title && (
                      <h3 className={styles.resultTitle}>
                        {result.title || result.name || 'Search Result'}
                      </h3>
                    )}
                    
                    <div className={styles.resultContent}>
                      {typeof result.content === 'string' ? (
                        <ExpandableContent content={result.content} />
                      ) : typeof result.content === 'object' && result.content !== null ? (
                        <div className={styles.objectContent}>
                          <pre>{JSON.stringify(result.content, null, 2)}</pre>
                        </div>
                      ) : (
                        <div className={styles.fullContent}>
                          {String(result.content || 'No content available')}
                        </div>
                      )}
                    </div>
                    
                    {/* Enhanced metadata display */}
                    {(result.source || result.date || result.url) && (
                      <div className={styles.resultMeta || 'resultMeta'}>
                        {result.source && <span className={styles.source || 'source'}><b>Source:</b> {result.source}</span>}
                        {result.date && <span className={styles.date || 'date'}><b>Date:</b> {new Date(result.date).toLocaleString()}</span>}
                        {result.url && (
                          <div className={styles.url || 'url'}>
                            <b>URL:</b> <a href={result.url} target="_blank" rel="noopener noreferrer">
                              {result.url.length > 40 ? result.url.substring(0, 40) + '...' : result.url}
                            </a>
                          </div>
                        )}
                      </div>
                    )}
                  </>
                )}
              </div>
            ))
          ) : (
            <div className={styles.errorBlock} style={{
              background: '#f8f9fa',
              borderLeft: '4px solid #3182ce',
            }}>
              <h3 style={{ marginTop: 0, marginBottom: '10px', color: '#3182ce' }}>No LLM Results Available</h3>
              <p>We couldn't process your search with the LLM model. This may be due to:</p>
              <ul style={{ paddingLeft: '20px', lineHeight: '1.5' }}>
                <li>No search results were found to process</li>
                <li>The selected model may be temporarily unavailable</li>
                <li>There might be an issue with the API connection</li>
              </ul>
              <p style={{ marginTop: '10px', fontSize: '0.9rem' }}>Try another search query or select a different model from the dropdown.</p>
            </div>
          )}
        </div>
      )}
    </div>
    </>
  );
};

export default SimpleLLMResults;
