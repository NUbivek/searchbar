import React from 'react';
import Head from 'next/head';

// Create a simplified version of the CategoryTabs component
const CategoryTabs = ({ categories, activeCategory, onSelectCategory }) => {
  return (
    <div className="category-tabs" style={{
      marginBottom: '16px',
      borderBottom: '1px solid #dee2e6'
    }}>
      <div className="tabs-container" style={{
        display: 'flex',
        flexWrap: 'wrap',
        gap: '4px',
        padding: '0 8px'
      }}>
        {categories.map(category => {
          const isActive = activeCategory === category.id;
          
          // Calculate metrics colors
          const getMetricColor = (type) => {
            switch(type) {
              case 'R': return '#4285F4';
              case 'C': return '#34A853';
              case 'A': return '#FBBC04';
              default: return '#4285F4';
            }
          };
          
          // Get tab color based on overall score
          const getTabColor = (score) => {
            if (score >= 90) return '#4CAF50';
            if (score >= 80) return '#8BC34A';
            if (score >= 70) return '#CDDC39';
            if (score >= 60) return '#FFC107';
            if (score >= 50) return '#FF9800';
            return '#FF5722';
          };
          
          // Format score for display
          const formatScore = (score) => {
            return `${Math.round(score)}%`;
          };
          
          // Tab background and text colors
          const tabBgColor = isActive ? getTabColor(category.metrics.overall) : 'transparent';
          const tabTextColor = isActive ? 'white' : '#495057';
          const tabBorderColor = isActive ? getTabColor(category.metrics.overall) : '#dee2e6';
          
          return (
            <div 
              key={category.id}
              onClick={() => onSelectCategory(category.id)}
              style={{
                cursor: 'pointer',
                padding: '8px 16px',
                borderRadius: '4px 4px 0 0',
                backgroundColor: tabBgColor,
                color: tabTextColor,
                margin: '0 2px',
                border: `1px solid ${tabBorderColor}`,
                borderBottom: isActive ? 'none' : `1px solid #dee2e6`,
                transition: 'all 0.2s ease',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                position: 'relative',
                minWidth: '120px',
                marginBottom: isActive ? '-1px' : '0',
                borderLeft: `4px solid ${category.color || getTabColor(category.metrics.overall)}`
              }}
            >
              <div style={{ 
                display: 'flex', 
                alignItems: 'center',
                flexDirection: 'column'
              }}>
                <div style={{ 
                  fontSize: '14px', 
                  fontWeight: isActive ? 'bold' : 'normal',
                  marginBottom: '2px',
                  textAlign: 'center'
                }}>
                  {category.name}
                </div>
                <div style={{ 
                  fontSize: '12px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  color: isActive ? 'rgba(255,255,255,0.9)' : '#6c757d'
                }}>
                  <span style={{ marginRight: '5px' }}>
                    R: <span style={{ color: getMetricColor('R'), fontWeight: 'bold' }}>{formatScore(category.metrics.relevance)}</span>
                  </span>
                  <span style={{ marginRight: '5px' }}>
                    C: <span style={{ color: getMetricColor('C'), fontWeight: 'bold' }}>{formatScore(category.metrics.credibility)}</span>
                  </span>
                  <span>
                    A: <span style={{ color: getMetricColor('A'), fontWeight: 'bold' }}>{formatScore(category.metrics.accuracy)}</span>
                  </span>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

// Create a simplified version of content card
const CategoryContent = ({ category }) => {
  return (
    <div className="category-content" style={{
      backgroundColor: '#f8f9fa',
      borderRadius: '0 0 8px 8px',
      padding: '16px',
      minHeight: '200px',
      border: '1px solid #dee2e6', 
      borderTop: 'none'
    }}>
      <div className="category-content-item" style={{
        marginBottom: '16px',
        padding: '14px',
        backgroundColor: '#fff',
        borderRadius: '8px',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
        border: '1px solid #e9ecef',
        borderLeft: `4px solid ${category.color || '#0066cc'}`
      }}>
        <h3 style={{ margin: '0 0 10px 0' }}>{category.content[0].title}</h3>
        <p>{category.content[0].description}</p>
        <div style={{ fontSize: '12px', color: '#6c757d', marginTop: '10px' }}>
          Sources:
          {category.sources.map((source, index) => (
            <a 
              key={index}
              href={source.url} 
              style={{ 
                color: '#0066cc', 
                marginLeft: '5px',
                textDecoration: 'none'
              }}
              target="_blank"
              rel="noopener noreferrer"
            >
              {source}
            </a>
          ))}
        </div>
      </div>
    </div>
  );
};

export default function TestCategoryRibbon() {
  // Sample data for testing
  const [activeCategory, setActiveCategory] = React.useState('key_insights');
  
  const sampleCategories = [
    {
      id: 'key_insights',
      name: 'Key Insights',
      color: '#4285F4',
      metrics: {
        relevance: 95,
        credibility: 95,
        accuracy: 93,
        overall: 94
      },
      content: [
        {
          title: 'Global Investment Landscape Projection',
          description: 'The global investment landscape is projected to grow by 15% in 2025, with emerging markets leading the charge at 22% growth rate.',
          url: 'https://example.com/investment'
        }
      ],
      sources: ['Goldman Sachs 2025 Market Outlook', 'Morgan Stanley Investment Report']
    },
    {
      id: 'market_analysis',
      name: 'Market Analysis',
      color: '#34A853',
      metrics: {
        relevance: 88,
        credibility: 92,
        accuracy: 90,
        overall: 90
      },
      content: [
        {
          title: 'AI Sector Growth',
          description: 'The AI sector is experiencing unprecedented growth with a CAGR of 37.3% from 2023-2025. This is primarily driven by advances in generative AI and its applications across industries.',
          url: 'https://example.com/ai-growth'
        }
      ],
      sources: ['McKinsey Tech Trends 2025', 'Gartner AI Market Analysis']
    },
    {
      id: 'financial_data',
      name: 'Financial Data',
      color: '#4C6EF5',
      metrics: {
        relevance: 85,
        credibility: 90,
        accuracy: 88,
        overall: 87
      },
      content: [
        {
          title: 'Financial Performance Summary',
          description: 'Tech sector quarterly results show a 12% increase in revenue and 15% growth in operating margin, outperforming market expectations.',
          url: 'https://example.com/financial-data'
        }
      ],
      sources: ['Bloomberg Financial Reports', 'NASDAQ Data']
    },
    {
      id: 'definition',
      name: 'Definition',
      color: '#9C27B0',
      metrics: {
        relevance: 82,
        credibility: 88,
        accuracy: 85,
        overall: 85
      },
      content: [
        {
          title: 'What is Market Capitalization?',
          description: 'Market capitalization refers to the total value of a company\'s outstanding shares of stock, calculated by multiplying the stock\'s current market price by the total number of outstanding shares.',
          url: 'https://example.com/market-cap'
        }
      ],
      sources: ['Investopedia', 'Financial Times Glossary']
    },
    {
      id: 'industry_trends',
      name: 'Industry Trends',
      color: '#00BCD4',
      metrics: {
        relevance: 80,
        credibility: 85,
        accuracy: 82,
        overall: 82
      },
      content: [
        {
          title: 'Renewable Energy Adoption',
          description: 'Industry trends show 30% year-over-year increase in renewable energy adoption across manufacturing sectors, with solar leading at 45% growth.',
          url: 'https://example.com/renewable-energy'
        }
      ],
      sources: ['Industry Reports 2025', 'Energy Transition Outlook']
    },
    {
      id: 'challenges',
      name: 'Challenges',
      color: '#F44336',
      metrics: {
        relevance: 75,
        credibility: 80,
        accuracy: 78,
        overall: 78
      },
      content: [
        {
          title: 'Supply Chain Disruptions',
          description: 'Ongoing supply chain challenges expected to persist through 2025, with 35% of companies reporting significant impacts on production timelines.',
          url: 'https://example.com/supply-chain'
        }
      ],
      sources: ['Global Supply Chain Report', 'Manufacturing Outlook 2025']
    }
  ];
  
  // Handler for tab selection
  const handleCategorySelect = (categoryId) => {
    setActiveCategory(categoryId);
  };
  
  // Get active category
  const activeCategoryObject = sampleCategories.find(cat => cat.id === activeCategory);
  
  return (
    <div style={{ maxWidth: '800px', margin: '0 auto', padding: '20px' }}>
      <Head>
        <title>Test Category Ribbon</title>
      </Head>
      
      <div style={{ textAlign: 'center', marginBottom: '30px' }}>
        <h1 style={{ color: '#333', marginBottom: '10px' }}>Test Category Ribbon</h1>
        <p style={{ color: '#666' }}>This page tests the sleek, modern category ribbon display</p>
      </div>
      
      <div style={{ marginTop: '40px' }}>
        <h2 style={{ color: '#333', marginBottom: '20px' }}>Sample Category Ribbon</h2>
        
        {/* Category Tabs */}
        <CategoryTabs 
          categories={sampleCategories} 
          activeCategory={activeCategory} 
          onSelectCategory={handleCategorySelect}
        />
        
        {/* Active Category Content */}
        {activeCategoryObject && (
          <CategoryContent category={activeCategoryObject} />
        )}
      </div>
    </div>
  );
}
